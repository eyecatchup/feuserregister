########################
# $Id$
########################

plugin.tx_feuserregister {
	_LOCAL_LANG.default {
		error_validator_required_email = Bitte geben Sie eine E-Mail-Adresse ein
		error_validator_email_email = Bitte geben Sie eine E-Mail-Adresse ein
	}
	pages {
		register	=
		confirm		=
		edit		=
		storagePid	=
	}
	global {
		requiredString = *
		useRequiredStringInLabel = 0
		useFieldAsUsername = email
		# required
		userGroupsAfterRegistration =
		# required
		userGroupsAfterConfirmation =
		# optional
		userGroupsAfterUpdate =
		# optional
		userGroupsAfterUpdateConfirmation =
		confirmationOnUpdateFields = email
		emailConfirmation = 1
		adminConfirmation = 0
		adminEmail {
			email =
			name  =
			sender {
				name =
				email =
			}
			onRegister = 1
			onConfirmation = 1
			onUpdate = 1
		}
		userEmail {
			email = ###FIELD_email###
			sender {
				name =
				email =
			}
			# onRegister will be ignored if plugin.tx_feuserregister.global.emailConfirmation is set
			onRegister = 1
			onConfirmation = 1
			# onUpdate will be ignored if plugin.tx_feuserregister.global.confirmationOnUpdateFields is set
			onUpdate = 0
		}
	}
	templates {
		register	= EXT:feuserregister/resources/template_register.html
		confirm		= EXT:feuserregister/resources/template_confirm.html
		edit		= EXT:feuserregister/resources/template_edit.html
		error		= EXT:feuserregister/resources/template_error.html
		mails		= EXT:feuserregister/resources/template_mails.html
	}
	defaultWraps {
		# all wraps are stdWrap's
		field.wrap = <span class="field">|</span>
		label.wrap = <label for="tx-feuserregister-field-###FIELDNAME###">|</label>
		error.wrap = <span class="error">|</span>
	}
	fields {
		# default validators:
		# between, boolean, dateformat, email, float, int, ip, ipv4, ipv6, length, regexp, required, url 
		# special validators:
		# equalField, equalValue, uniqueInDb,uniqueInPid
		# field types:
		# text, password, textarea, TCA
		username {
			type = text
			validators = required,uniqueInDb
			# labelWrap = stdWrap
			# fieldWrap = stdWrap
			# errorWrap = stdWrap
		}
		email {
			type = text
			validators  = email
		}
		password {
			type = password
			validators = required,length
			validatorOptions {
				length {
					min = 6
				}
			}
			transformer = t3sec_saltedpw
		}
		password_confirm {
			type = password
			minLength = 3
			maxLength = 30
			validators  = required,equalField
			validatorOptions {
				equalField {
					field = password
				}
			}
		}
		tx_feuserregister_gender {
			type = TCA
		}
		tx_feuserregister_firstname {
			type = text
		}
		tx_feuserregister_lastname {
			type = text
		}
		tx_feuserregister_birthday {
			type = text
			validators = required,dateformat
			validatorOptions {
				dateformat {
					format = %d.%m.%Y
				}
			}
			transformers = timestamp,date
			transformerOptions {
				timestamp {
					inFormat = %d.%m.%Y
				}
				date {
					format = %d.%m.%Y
				}
			}
		}
		address {
			type = text
			validators = required
		}
		zip {
			type = text
			validators  = required,int,length
			validatorOptions {
				length {
					min = 5
					max = 5
				}
			}
		}
		city {
			type = text
			validators = required
		}
		country {
			type = text
			validators = required
		}
		tx_feuserregister_test {
			type = TCA
		}
		usergroup {
			type = TCA
		}
	}
	register {
		step1 {
			subpart = template_step1
			fields = username,email,password,password_confirm
		}
		step2 {
			subpart = template_step2
			fields = tx_feuserregister_gender,tx_feuserregister_firstname,tx_feuserregister_lastname,tx_feuserregister_birthday,address,zip,city,country
		}
		preview {
			subpart = template_preview
		}
		success {
			subpart = template_success
		}
	}
	edit {
		step1 {
			subpart = template_step1
			fields = username,email,password,password_confirm
		}
		step2 {
			subpart = template_step2
			fields = tx_feuserregister_gender,tx_feuserregister_firstname,tx_feuserregister_lastname,tx_feuserregister_birthday,address,zip,city,country
		}
		preview {
			subpart = template_preview
		}
		success {
			subpart = template_success
		}
	}
}

plugin.tx_feuserregister.controller.userRegistration = USER_INT
plugin.tx_feuserregister.controller.userRegistration {
	includeLibs = EXT:feuserregister/controller/class.tx_feuserregister_controller_userregistration.php
	userFunc = tx_feuserregister_controller_UserRegistration->execute
}


tt_content.list.20.feuserregister_UserRegistration = < plugin.tx_feuserregister.controller.userRegistration